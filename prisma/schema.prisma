// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

model Role {
  roleId   Int    @id @default(autoincrement())
  roleName String @unique
  users    User[]
}

model User {
  userId      Int      @id @default(autoincrement())
  name        String
  username    String   @unique
  email       String   @unique
  password    String?
  description String?
  rank        Int      @default(0)
  candy       Int?     @default(100)
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roleId Int
  role   Role    @relation(fields: [roleId], references: [roleId])
  Novel  Novel[]
}

model Novel {
  novelId     Int      @id @default(autoincrement())
  slug        String
  thumbnail   String?
  title       String
  description String?
  scrapedUrl  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  postedById Int
  postedBy   User    @relation(fields: [postedById], references: [userId], onDelete: Cascade)
  authorId   Int?
  author     Author? @relation(fields: [authorId], references: [authorId], onDelete: Cascade)

  genre Int

  tags     NovelTag[]
  chapters Chapter[]
}

// ------------
model Author {
  authorId Int     @id @default(autoincrement())
  name     String  @unique
  novels   Novel[]
}

// ------------
model NovelTag {
  novelId Int
  tagId   Int

  novel Novel @relation(fields: [novelId], references: [novelId], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [tagId], onDelete: Cascade)

  @@id([novelId, tagId])
}

model Tag {
  tagId     Int        @id @default(autoincrement())
  index     Int        @unique
  name      String     @unique
  novelTags NovelTag[]
}

// ------------

model Chapter {
  // chapterId     Int      @id @default(autoincrement())
  chapterNumber Int
  title         String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  novelId Int
  novel   Novel @relation(fields: [novelId], references: [novelId], onDelete: Cascade)

  @@id([chapterNumber, novelId])
}
